// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== User & Auth Models =====

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  type          UserType  @default(INFLUENCER)
  status        UserStatus @default(ACTIVE)
  emailVerified Boolean   @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  profile       Profile?
  campaigns     Campaign[]
  payments      Payment[]
  notifications Notification[]
  reviews       Review[]
  applications  CampaignApplication[]
  contents      Content[]
  
  @@index([email])
  @@index([type])
  @@index([status])
}

enum UserType {
  BUSINESS
  INFLUENCER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Common fields
  bio         String?
  avatar      String?
  phone       String?
  location    String?
  
  // Business specific
  companyName String?
  businessNo  String?
  industry    String?
  
  // Influencer specific
  platforms   Json?    // { instagram: "handle", youtube: "channel", ... }
  categories  String[]
  followerCount Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===== Campaign Models =====

model Campaign {
  id          String   @id @default(cuid())
  businessId  String
  business    User     @relation(fields: [businessId], references: [id])
  
  title       String
  description String
  category    String
  objectives  String[]
  startDate   DateTime
  endDate     DateTime
  status      CampaignStatus @default(DRAFT)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  budget       CampaignBudget?
  target       CampaignTarget?
  content      CampaignContent?
  applications CampaignApplication[]
  payments     Payment[]
  contents     Content[]
  
  @@index([businessId])
  @@index([status])
  @@index([category])
}

model CampaignBudget {
  id               String   @id @default(cuid())
  campaignId       String   @unique
  campaign         Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  total            Float
  spent            Float    @default(0)
  paymentType      String   // fixed, performance
  fixedAmount      Float?
  performanceMetric String?  // views, clicks, conversions
  performanceRate  Float?
  maxParticipants  Int
  paymentTerms     String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CampaignTarget {
  id             String   @id @default(cuid())
  campaignId     String   @unique
  campaign       Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  minFollowers   Int
  maxFollowers   Int
  locations      String[]
  categories     String[]
  platforms      String[]
  engagementRate Float?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CampaignContent {
  id            String   @id @default(cuid())
  campaignId    String   @unique
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  types         String[]
  requirements  String[]
  guidelines    String[]
  hashtags      String[]
  mentions      String[]
  deliverables  Json     // { posts: 3, stories: 5, videos: 1 }
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

model CampaignApplication {
  id           String   @id @default(cuid())
  campaignId   String
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  influencerId String
  influencer   User     @relation(fields: [influencerId], references: [id])
  
  status       ApplicationStatus @default(PENDING)
  message      String?
  reviewedAt   DateTime?
  reviewNote   String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  contents     Content[]
  
  @@unique([campaignId, influencerId])
  @@index([status])
  @@index([influencerId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
  COMPLETED
}

model Content {
  id            String   @id @default(cuid())
  campaignId    String
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  influencerId  String
  influencer    User     @relation(fields: [influencerId], references: [id])
  applicationId String
  application   CampaignApplication @relation(fields: [applicationId], references: [id])
  
  platform      String   // instagram, youtube, tiktok
  url           String
  type          String   // post, story, video, reel
  caption       String?
  status        ContentStatus @default(PENDING_REVIEW)
  
  reviewedAt    DateTime?
  feedback      String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  metrics       ContentMetrics?
  payment       Payment?
  
  @@index([campaignId])
  @@index([influencerId])
  @@index([status])
}

enum ContentStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

model ContentMetrics {
  id           String   @id @default(cuid())
  contentId    String   @unique
  content      Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  views        Int      @default(0)
  likes        Int      @default(0)
  comments     Int      @default(0)
  shares       Int      @default(0)
  reach        Int      @default(0)
  engagement   Int      @default(0)
  conversions  Int      @default(0)
  
  lastUpdated  DateTime @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ===== Payment Models =====

model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  contentId   String?  @unique
  content     Content? @relation(fields: [contentId], references: [id])
  
  amount      Float
  currency    String   @default("KRW")
  type        String   // CAMPAIGN_REWARD, DEPOSIT, WITHDRAWAL
  status      PaymentStatus @default(PENDING)
  method      String?  // CARD, BANK_TRANSFER, etc.
  
  // Toss Payments specific
  paymentKey  String?  @unique
  orderId     String   @unique
  
  metadata    Json?
  
  paidAt      DateTime?
  failedAt    DateTime?
  cancelledAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([orderId])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// ===== Notification Model =====

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  type      String   // campaign.new, payment.completed, etc.
  title     String
  message   String
  data      Json?
  
  read      Boolean  @default(false)
  readAt    DateTime?
  
  createdAt DateTime @default(now())
  
  @@index([userId, read])
  @@index([createdAt])
}

// ===== Review Model =====

model Review {
  id           String   @id @default(cuid())
  reviewerId   String
  reviewer     User     @relation(fields: [reviewerId], references: [id])
  targetId     String   // Can be userId or campaignId
  targetType   String   // USER, CAMPAIGN
  
  rating       Int      // 1-5
  comment      String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([targetId, targetType])
  @@index([reviewerId])
}