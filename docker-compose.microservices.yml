version: '3.8'

services:
  # API Gateway (Kong)
  kong:
    image: kong:3.4-alpine
    container_name: api-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    volumes:
      - ./kong.yml:/kong/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - microservices

  # Service Registry (Consul)
  consul:
    image: consul:1.16
    container_name: service-registry
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - microservices

  # Message Broker (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: message-broker
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices

  # Distributed Cache (Redis Cluster)
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices

  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    command: redis-server --slaveof redis-master 6379 --masterauth ${REDIS_PASSWORD} --requirepass ${REDIS_PASSWORD}
    depends_on:
      - redis-master
    networks:
      - microservices

  # Database (PostgreSQL with Read Replicas)
  postgres-master:
    image: postgres:15-alpine
    container_name: postgres-master
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservices

  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_HOST: postgres-master
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    depends_on:
      - postgres-master
    networks:
      - microservices

  # Elasticsearch for Search Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - microservices

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - microservices

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices

  # Distributed Tracing (Jaeger)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    networks:
      - microservices

  # =================== Microservices ===================

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres-master:5432/users
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      CONSUL_HOST: consul
      SERVICE_NAME: user-service
      SERVICE_PORT: 3001
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
      - consul
    networks:
      - microservices
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # Campaign Service
  campaign-service:
    build:
      context: ./services/campaign-service
      dockerfile: Dockerfile
    container_name: campaign-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres-master:5432/campaigns
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      ELASTICSEARCH_URL: http://elasticsearch:9200
      CONSUL_HOST: consul
      SERVICE_NAME: campaign-service
      SERVICE_PORT: 3002
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
      - elasticsearch
      - consul
    networks:
      - microservices
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres-master:5432/payments
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      CONSUL_HOST: consul
      SERVICE_NAME: payment-service
      SERVICE_PORT: 3003
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
      - consul
    networks:
      - microservices
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      CONSUL_HOST: consul
      SERVICE_NAME: notification-service
      SERVICE_PORT: 3004
    depends_on:
      - redis-master
      - rabbitmq
      - consul
    networks:
      - microservices
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres-replica:5432/analytics
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      CONSUL_HOST: consul
      SERVICE_NAME: analytics-service
      SERVICE_PORT: 3005
    depends_on:
      - postgres-replica
      - redis-master
      - elasticsearch
      - consul
    networks:
      - microservices
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: search-service
    environment:
      NODE_ENV: production
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      CONSUL_HOST: consul
      SERVICE_NAME: search-service
      SERVICE_PORT: 3006
    depends_on:
      - elasticsearch
      - redis-master
      - consul
    networks:
      - microservices
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

networks:
  microservices:
    driver: bridge

volumes:
  postgres_master_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data: