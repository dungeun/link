import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { format } from 'date-fns';
export const CampaignCard = ({ campaign, performance, onView, onEdit, className = '' }) => {
    const isActive = campaign.isActive &&
        new Date() >= new Date(campaign.startDate) &&
        new Date() <= new Date(campaign.endDate);
    const daysRemaining = Math.ceil((new Date(campaign.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
    const budgetPercentage = campaign.budget
        ? (campaign.spentAmount / campaign.budget) * 100
        : 0;
    return (_jsx("div", { className: `campaign-card bg-white border border-gray-200 rounded-lg shadow-sm ${className}`, children: _jsxs("div", { className: "p-6", children: [_jsxs("div", { className: "flex items-start justify-between mb-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-gray-900", children: campaign.name }), campaign.description && (_jsx("p", { className: "mt-1 text-sm text-gray-600", children: campaign.description }))] }), _jsx("div", { className: "flex items-center gap-2", children: isActive ? (_jsx("span", { className: "px-3 py-1 text-xs font-medium bg-green-100 text-green-700 rounded-full", children: "Active" })) : campaign.isActive ? (_jsx("span", { className: "px-3 py-1 text-xs font-medium bg-yellow-100 text-yellow-700 rounded-full", children: "Scheduled" })) : (_jsx("span", { className: "px-3 py-1 text-xs font-medium bg-gray-100 text-gray-700 rounded-full", children: "Inactive" })) })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 mb-4 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-gray-500", children: "Duration" }), _jsxs("p", { className: "font-medium", children: [format(new Date(campaign.startDate), 'MMM d'), " - ", format(new Date(campaign.endDate), 'MMM d, yyyy')] }), isActive && daysRemaining > 0 && (_jsxs("p", { className: "text-xs text-gray-600 mt-1", children: [daysRemaining, " days remaining"] }))] }), campaign.budget && (_jsxs("div", { children: [_jsx("p", { className: "text-gray-500", children: "Budget" }), _jsxs("p", { className: "font-medium", children: ["$", campaign.spentAmount.toFixed(0), " / $", campaign.budget.toFixed(0)] }), _jsx("div", { className: "mt-1 w-full bg-gray-200 rounded-full h-1.5", children: _jsx("div", { className: "bg-blue-600 h-1.5 rounded-full", style: { width: `${Math.min(budgetPercentage, 100)}%` } }) })] }))] }), performance && (_jsxs("div", { className: "grid grid-cols-3 gap-4 pt-4 border-t border-gray-200", children: [_jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "text-2xl font-bold text-gray-900", children: [performance.roi.toFixed(0), "%"] }), _jsx("p", { className: "text-xs text-gray-500", children: "ROI" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "text-2xl font-bold text-gray-900", children: [performance.conversionRate.toFixed(1), "%"] }), _jsx("p", { className: "text-xs text-gray-500", children: "Conversion" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("p", { className: "text-2xl font-bold text-gray-900", children: ["$", (performance.totalRevenue / 1000).toFixed(1), "k"] }), _jsx("p", { className: "text-xs text-gray-500", children: "Revenue" })] })] })), _jsxs("div", { className: "flex gap-2 mt-4 pt-4 border-t border-gray-200", children: [onView && (_jsx("button", { onClick: onView, className: "flex-1 px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors", children: "View Details" })), onEdit && (_jsx("button", { onClick: onEdit, className: "flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors", children: "Edit Campaign" }))] })] }) }));
};
//# sourceMappingURL=CampaignCard.js.map