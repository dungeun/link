{
  "module": "@company/cache",
  "version": "1.0.0",
  "description": "엔터프라이즈 캐시 모듈 - 다양한 캐시 전략과 고급 기능 지원",
  "documentation": {
    "interface": {
      "CacheManager": "캐시 작업을 관리하는 메인 클래스",
      "CacheStrategy": "캐시 전략 인터페이스 (LRU, LFU, FIFO)",
      "CacheSerializer": "데이터 직렬화/역직렬화 유틸리티",
      "CacheCompressor": "데이터 압축/압축해제 유틸리티",
      "MemoryManager": "메모리 사용량 관리 및 모니터링",
      "CacheWarmer": "캐시 예열 및 스케줄링"
    },
    "patterns": {
      "tagBasedInvalidation": "태그를 사용한 효율적인 캐시 무효화",
      "memoryPressureHandling": "메모리 압박 상황 자동 처리",
      "compressionStrategy": "대용량 데이터 자동 압축",
      "warmupScheduling": "주기적 캐시 예열 스케줄링"
    },
    "examples": [
      {
        "name": "기본 사용법",
        "code": "const cache = new CacheManager({ strategy: 'lru', maxSize: 100 });\nawait cache.set('key', 'value', { ttl: 3600000 });\nconst result = await cache.get('key');"
      },
      {
        "name": "태그 기반 무효화",
        "code": "await cache.set('user:1', userData, { tags: ['user', 'profile'] });\nawait cache.set('user:2', userData2, { tags: ['user'] });\nawait cache.invalidateByTag('user'); // 모든 user 태그 캐시 삭제"
      },
      {
        "name": "메모리 관리",
        "code": "const memoryManager = new MemoryManager(50); // 50MB 제한\nmemoryManager.enableMemoryPressureHandling({\n  threshold: 0.9,\n  onMemoryPressure: (info) => cache.prune()\n});"
      },
      {
        "name": "캐시 워밍",
        "code": "const warmer = new CacheWarmer(cache);\nawait warmer.scheduleWarmup('userCache', {\n  source: 'api',\n  url: '/api/users',\n  schedule: { interval: 3600000 },\n  keyExtractor: (user) => `user:${user.id}`\n});"
      }
    ],
    "troubleshooting": {
      "memoryLeak": "메모리 누수 방지를 위해 주기적으로 prune() 호출 또는 autoCleanup 활성화",
      "performanceIssue": "대용량 데이터는 압축 활성화, 적절한 maxSize 설정 필요",
      "tagIndexGrowth": "사용하지 않는 태그는 주기적으로 정리 필요"
    }
  },
  "features": {
    "strategies": ["LRU", "LFU", "FIFO"],
    "ttlSupport": true,
    "tagBasedInvalidation": true,
    "namespaces": true,
    "compression": true,
    "serialization": true,
    "memoryManagement": true,
    "cacheWarming": true,
    "statistics": true,
    "events": true
  },
  "quality": {
    "coverage": 95,
    "tested": true,
    "aiValidated": true,
    "performanceOptimized": true,
    "memoryEfficient": true
  },
  "dependencies": {
    "@company/core": "기본 모듈 기능과 Result 타입"
  },
  "useCases": [
    "API 응답 캐싱",
    "세션 데이터 관리",
    "계산 결과 캐싱",
    "리소스 최적화",
    "데이터베이스 쿼리 캐싱"
  ],
  "bestPractices": [
    "적절한 캐시 전략 선택 (읽기 패턴에 따라)",
    "TTL 설정으로 자동 만료 활용",
    "태그 기반 무효화로 관련 캐시 일괄 처리",
    "메모리 제한 설정으로 OOM 방지",
    "압축으로 메모리 효율성 향상"
  ]
}