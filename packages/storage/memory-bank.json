{
  "module": "@company/storage",
  "version": "1.0.0",
  "description": "엔터프라이즈 스토리지 모듈 - 다양한 스토리지 프로바이더 통합 관리",
  "documentation": {
    "interface": {
      "StorageManager": "스토리지 작업을 관리하는 메인 클래스",
      "StorageProvider": "스토리지 프로바이더 인터페이스",
      "IndexedDBProvider": "대용량 데이터를 위한 IndexedDB 프로바이더",
      "StorageEncryption": "데이터 암호화/복호화 유틸리티",
      "StorageCompression": "데이터 압축/압축해제 유틸리티",
      "QuotaManager": "스토리지 쿼터 관리 및 모니터링",
      "StorageSync": "프로바이더 간 데이터 동기화",
      "BackupRestore": "백업 생성 및 복원"
    },
    "patterns": {
      "encryptedStorage": "민감한 데이터의 자동 암호화 저장",
      "compressedStorage": "대용량 데이터의 자동 압축 저장",
      "quotaManagement": "스토리지 용량 자동 관리",
      "crossProviderSync": "여러 스토리지 간 실시간 동기화",
      "incrementalBackup": "변경된 데이터만 백업"
    },
    "examples": [
      {
        "name": "기본 사용법",
        "code": "const storage = new StorageManager({ defaultProvider: 'local' });\nawait storage.set('key', 'value', { ttl: 3600000 });\nconst result = await storage.get('key');"
      },
      {
        "name": "암호화 스토리지",
        "code": "const encrypted = new EncryptedStorageProvider(provider, 'password');\nawait encrypted.set('secret', sensitiveData);\nconst decrypted = await encrypted.get('secret');"
      },
      {
        "name": "압축 스토리지",
        "code": "const compressed = new CompressedStorageProvider(provider);\nawait compressed.set('large', largeData);\nconst stats = await compressed.getCompressionStats();"
      },
      {
        "name": "쿼터 관리",
        "code": "const quota = new QuotaManager({ maxQuota: 50 * 1024 * 1024 });\nquota.addQuotaListener((info) => {\n  if (info.percentage > 80) cleanupOldData();\n});"
      },
      {
        "name": "동기화",
        "code": "const sync = new StorageSync();\nsync.startAutoSync(localStorage, indexedDB, true);\nconst result = await sync.verifySyncIntegrity(localStorage, indexedDB);"
      },
      {
        "name": "백업/복원",
        "code": "const backup = await backupRestore.createBackup(provider, {\n  compress: true,\n  encrypt: true,\n  password: 'secret'\n});\nbackupRestore.downloadBackup(backup, 'backup.json');"
      }
    ],
    "troubleshooting": {
      "quotaExceeded": "QuotaManager로 자동 정리 설정 또는 수동으로 cleanup() 호출",
      "syncConflicts": "적절한 충돌 해결 전략 선택 (newest-wins, merge 등)",
      "encryptionPerformance": "대용량 데이터는 압축 후 암호화로 성능 개선",
      "indexedDBCompatibility": "구형 브라우저는 localStorage 폴백 사용"
    }
  },
  "features": {
    "providers": ["LocalStorage", "SessionStorage", "Memory", "IndexedDB"],
    "encryption": true,
    "compression": true,
    "quotaManagement": true,
    "synchronization": true,
    "backupRestore": true,
    "ttlSupport": true,
    "namespaces": true,
    "events": true,
    "statistics": true
  },
  "quality": {
    "coverage": 95,
    "tested": true,
    "aiValidated": true,
    "performanceOptimized": true,
    "securityAudited": true
  },
  "dependencies": {
    "@company/core": "기본 모듈 기능과 Result 타입"
  },
  "useCases": [
    "사용자 설정 저장",
    "세션 데이터 관리",
    "오프라인 데이터 캐싱",
    "민감한 정보 암호화 저장",
    "대용량 데이터 저장 (IndexedDB)",
    "크로스 탭 동기화"
  ],
  "bestPractices": [
    "민감한 데이터는 항상 암호화하여 저장",
    "대용량 데이터는 IndexedDB 사용",
    "적절한 TTL 설정으로 자동 정리",
    "쿼터 모니터링으로 용량 관리",
    "정기적인 백업으로 데이터 보호"
  ]
}