'use client'

import { useState, useEffect, useCallback, useMemo, memo } from 'react'
import Link from 'next/link'
import { apiGet, apiPost } from '@/lib/api/client'
import { Search, Filter, Check, X, Eye, MessageSquare, Instagram, Youtube, User, Users, Calendar, TrendingUp, Facebook, Twitter, Mail, Phone, MapPin, Globe, Hash, Trash2 } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'

interface Applicant {
  id: string
  campaignId: string
  campaignTitle: string
  message: string
  proposedPrice?: number
  status: string
  createdAt: string
  appliedAt?: string
  influencerId: string
  influencerName: string
  influencerHandle: string
  followers: number
  engagementRate: number
  influencer?: {
    id: string
    name: string
    email: string
    phone?: string
    profile?: {
      profileImage?: string
      bio?: string
      location?: string
      website?: string
      instagram?: string
      instagramFollowers?: number
      instagramEngagementRate?: number
      youtube?: string
      youtubeSubscribers?: number
      youtubeEngagementRate?: number
      facebook?: string
      facebookFollowers?: number
      facebookEngagementRate?: number
      twitter?: string
      twitterFollowers?: number
      twitterEngagementRate?: number
      tiktok?: string
      tiktokFollowers?: number
      tiktokEngagementRate?: number
      blog?: string
      blogVisitors?: number
      averageEngagementRate?: number
      categories?: string
      gender?: string
      ageRange?: string
      mainPlatform?: string
    }
  }
}

// SNS 헬퍼 함수들
const calculateTotalFollowers = (applicant: Applicant) => {
  if (!applicant.influencer?.profile) return applicant.followers || 0
  const profile = applicant.influencer.profile
  return (
    (profile.instagramFollowers || 0) +
    (profile.youtubeSubscribers || 0) +
    (profile.facebookFollowers || 0) +
    (profile.twitterFollowers || 0) +
    (profile.tiktokFollowers || 0)
  )
}

const calculateAverageEngagement = (applicant: Applicant): string | number => {
  if (!applicant.influencer?.profile) return applicant.engagementRate || 0
  const profile = applicant.influencer.profile
  const engagements = [
    profile.instagramEngagementRate,
    profile.youtubeEngagementRate,
    profile.facebookEngagementRate,
    profile.twitterEngagementRate,
    profile.tiktokEngagementRate
  ].filter(rate => rate !== undefined && rate !== null) as number[]
  
  if (engagements.length === 0) return applicant.engagementRate || 0
  const avg = engagements.reduce((a, b) => a + b, 0) / engagements.length
  return Number(avg.toFixed(2))
}

const countActivePlatforms = (applicant: Applicant) => {
  if (!applicant.influencer?.profile) return 1
  const profile = applicant.influencer.profile
  let count = 0
  if (profile.instagram) count++
  if (profile.youtube) count++
  if (profile.facebook) count++
  if (profile.twitter) count++
  if (profile.tiktok) count++
  if (profile.blog) count++
  return count || 1
}

const SNSCard = ({ platform, handle, followers, engagementRate, icon: Icon, color, url }: any) => (
  <div className={`bg-gradient-to-r ${color} p-1 rounded-lg`}>
    <div className="bg-white p-4 rounded-lg">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <Icon className="w-5 h-5" />
          <div>
            <h4 className="font-semibold text-gray-900">{platform}</h4>
            <p className="text-xs text-gray-600 truncate max-w-[150px]">@{handle}</p>
          </div>
        </div>
        <a
          href={url}
          target="_blank"
          rel="noopener noreferrer"
          className="text-xs text-indigo-600 hover:text-indigo-700"
        >
          방문
        </a>
      </div>
      <div className="grid grid-cols-2 gap-3">
        <div>
          <p className="text-xs text-gray-500">팔로워</p>
          <p className="font-semibold text-gray-900">{followers?.toLocaleString() || 0}</p>
        </div>
        {engagementRate && (
          <div>
            <p className="text-xs text-gray-500">참여율</p>
            <p className="font-semibold text-gray-900">{engagementRate}%</p>
          </div>
        )}
      </div>
    </div>
  </div>
)

interface Props {
  campaign: any
}

export default function ApplicantManagementTab({ campaign }: Props) {
  const { toast } = useToast()
  const [applicants, setApplicants] = useState<Applicant[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all')
  const [filterCampaign, setFilterCampaign] = useState('all')
  const [campaigns, setCampaigns] = useState<Array<{ id: string; title: string }>>([])
  const [selectedApplicant, setSelectedApplicant] = useState<Applicant | null>(null)
  const [showDetailModal, setShowDetailModal] = useState(false)
  const [activeTab, setActiveTab] = useState('profile')
  const [processingId, setProcessingId] = useState<string | null>(null)
  const [stats, setStats] = useState({
    totalApplicants: 0,
    pendingApplicants: 0,
    approvedApplicants: 0,
    rejectedApplicants: 0
  })

  useEffect(() => {
    fetchApplicants()
    fetchCampaigns()
  }, [])

  const fetchApplicants = async () => {
    try {
      setLoading(true)
      const response = await apiGet('/api/business/applications')
      
      if (response.ok) {
        const data = await response.json()
        const applications = data.applications || []
        setApplicants(applications)
        
        // 통계 계산
        setStats({
          totalApplicants: applications.length,
          pendingApplicants: applications.filter((a: Applicant) => a.status === 'PENDING').length,
          approvedApplicants: applications.filter((a: Applicant) => a.status === 'APPROVED').length,
          rejectedApplicants: applications.filter((a: Applicant) => a.status === 'REJECTED').length
        })
      }
    } catch (error) {
      console.error('지원자 데이터 조회 실패:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchCampaigns = async () => {
    try {
      const response = await apiGet('/api/business/campaigns')
      if (response.ok) {
        const data = await response.json()
        setCampaigns(data.campaigns || [])
      }
    } catch (error) {
      console.error('캠페인 데이터 조회 실패:', error)
    }
  }

  const handleStatusChange = async (applicantId: string, campaignId: string, status: 'APPROVED' | 'REJECTED' | 'CANCELLED') => {
    try {
      const response = await apiPost(`/api/business/campaigns/${campaignId}/applicants/${applicantId}/status`, {
        status
      })

      if (response.ok) {
        const messages = {
          APPROVED: '지원자를 승인했습니다.',
          REJECTED: '지원자를 거절했습니다.',
          CANCELLED: '지원을 취소했습니다.'
        }
        toast({
          title: '성공',
          description: messages[status]
        })
        fetchApplicants() // 목록 새로고침
        setShowDetailModal(false) // 모달 닫기
      } else {
        throw new Error('상태 업데이트 실패')
      }
    } catch (error) {
      toast({
        title: '오류',
        description: '상태 업데이트에 실패했습니다.',
        variant: 'destructive'
      })
    }
  }

  const handleDeleteApplicant = async (applicantId: string, campaignId: string) => {
    if (!confirm('정말 이 지원을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
      return
    }
    
    try {
      const response = await apiPost(`/api/business/campaigns/${campaignId}/applicants/${applicantId}/delete`, {})

      if (response.ok) {
        toast({
          title: '성공',
          description: '지원이 삭제되었습니다.'
        })
        fetchApplicants() // 목록 새로고침
        setShowDetailModal(false) // 모달 닫기
      } else {
        throw new Error('삭제 실패')
      }
    } catch (error) {
      toast({
        title: '오류',
        description: '삭제에 실패했습니다.',
        variant: 'destructive'
      })
    }
  }

  const handleSendEmail = (email: string, name: string) => {
    const subject = encodeURIComponent(`[링크픽] ${selectedApplicant?.campaignTitle} 캠페인 관련 문의`)
    const body = encodeURIComponent(`안녕하세요 ${name}님,\n\n${selectedApplicant?.campaignTitle} 캠페인과 관련하여 연락드립니다.\n\n`)
    window.open(`mailto:${email}?subject=${subject}&body=${body}`, '_blank')
  }

  const filteredApplicants = applicants.filter(applicant => {
    const matchesSearch = 
      (applicant.influencerName?.toLowerCase().includes(searchTerm.toLowerCase()) || false) ||
      (applicant.campaignTitle?.toLowerCase().includes(searchTerm.toLowerCase()) || false)
    const matchesStatus = filterStatus === 'all' || applicant.status === filterStatus
    const matchesCampaign = filterCampaign === 'all' || applicant.campaignId === filterCampaign
    return matchesSearch && matchesStatus && matchesCampaign
  })

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      PENDING: { color: 'bg-yellow-100 text-yellow-700', text: '검토중' },
      APPROVED: { color: 'bg-green-100 text-green-700', text: '승인됨' },
      REJECTED: { color: 'bg-red-100 text-red-700', text: '거절됨' },
      CANCELLED: { color: 'bg-gray-100 text-gray-700', text: '취소됨' }
    }
    
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.PENDING
    return (
      <span className={`px-3 py-1 rounded-full text-xs font-medium ${config.color}`}>
        {config.text}
      </span>
    )
  }
  
  const getStatusText = (status: string) => {
    const statusConfig = {
      PENDING: '검토중',
      APPROVED: '승인됨',
      REJECTED: '거절됨',
      CANCELLED: '취소됨'
    }
    return statusConfig[status as keyof typeof statusConfig] || '검토중'
  }

  const formatDate = (dateString: string | Date) => {
    if (!dateString) return '날짜 없음'
    
    const date = new Date(dateString)
    if (isNaN(date.getTime())) return '날짜 없음'
    
    const now = new Date()
    const diffTime = Math.abs(now.getTime() - date.getTime())
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays === 0) return '오늘'
    if (diffDays === 1) return '어제'
    if (diffDays < 7) return `${diffDays}일 전`
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* 통계 카드 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">전체 지원자</p>
              <p className="text-2xl font-bold text-gray-900 mt-1">{stats.totalApplicants}</p>
            </div>
            <div className="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
              <User className="w-6 h-6 text-indigo-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">검토 대기</p>
              <p className="text-2xl font-bold text-gray-900 mt-1">{stats.pendingApplicants}</p>
            </div>
            <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
              <Calendar className="w-6 h-6 text-yellow-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">승인됨</p>
              <p className="text-2xl font-bold text-gray-900 mt-1">{stats.approvedApplicants}</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <Check className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">거절됨</p>
              <p className="text-2xl font-bold text-gray-900 mt-1">{stats.rejectedApplicants}</p>
            </div>
            <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
              <X className="w-6 h-6 text-red-600" />
            </div>
          </div>
        </div>
      </div>

      {/* 검색 및 필터 */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex flex-col sm:flex-row gap-4 mb-6">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="지원자 또는 캠페인 검색..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
          </div>
          <div className="flex gap-2">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            >
              <option value="all">전체 상태</option>
              <option value="PENDING">검토중</option>
              <option value="APPROVED">승인됨</option>
              <option value="REJECTED">거절됨</option>
              <option value="CANCELLED">취소됨</option>
            </select>
            <select
              value={filterCampaign}
              onChange={(e) => setFilterCampaign(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            >
              <option value="all">전체 캠페인</option>
              {campaigns.map(campaign => (
                <option key={campaign.id} value={campaign.id}>{campaign.title}</option>
              ))}
            </select>
          </div>
        </div>

        {/* 지원자 리스트 */}
        <div className="bg-white rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    인플루언서
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    캠페인
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    상태
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    지원일
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    작업
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredApplicants.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-12 text-center text-gray-500">
                      지원자가 없습니다.
                    </td>
                  </tr>
                ) : (
                  filteredApplicants.map((applicant) => (
                    <tr 
                      key={applicant.id} 
                      className="hover:bg-gray-50 cursor-pointer" 
                      onClick={() => {
                        setSelectedApplicant(applicant)
                        setShowDetailModal(true)
                      }}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="w-10 h-10 bg-gray-200 rounded-full overflow-hidden flex-shrink-0">
                            {applicant.influencer?.profile?.profileImage ? (
                              <img 
                                src={applicant.influencer.profile.profileImage} 
                                alt={applicant.influencerName || '인플루언서'}
                                className="w-full h-full object-cover"
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center">
                                <User className="w-5 h-5 text-gray-400" />
                              </div>
                            )}
                          </div>
                          <div className="ml-3">
                            <p className="text-sm font-medium text-gray-900">{applicant.influencerName || '이름 없음'}</p>
                            <p className="text-sm text-gray-500">@{applicant.influencerHandle}</p>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <p className="text-sm text-gray-900">{applicant.campaignTitle}</p>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getStatusBadge(applicant.status)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(applicant.appliedAt || applicant.createdAt)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex items-center gap-2">
                          {applicant.status === 'PENDING' && (
                            <>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleStatusChange(applicant.id, applicant.campaignId, 'APPROVED')
                                }}
                                className="inline-flex items-center px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700"
                              >
                                <Check className="w-3 h-3 mr-1" />
                                승인
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleStatusChange(applicant.id, applicant.campaignId, 'REJECTED')
                                }}
                                className="inline-flex items-center px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700"
                              >
                                <X className="w-3 h-3 mr-1" />
                                거절
                              </button>
                            </>
                          )}
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              setSelectedApplicant(applicant)
                              setShowDetailModal(true)
                            }}
                            className="text-indigo-600 hover:text-indigo-900"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* 상세 정보 모달 - 간단한 구조 */}
      {selectedApplicant && showDetailModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* 백드롭 */}
          <div 
            className="fixed inset-0 bg-black bg-opacity-60"
            onClick={() => {
              setShowDetailModal(false)
              setActiveTab('profile')
            }}
          />
          
          {/* 모달 */}
          <div className="relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
            {/* 모달 헤더 */}
            <div className="border-b px-6 py-4">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">지원자 상세 정보</h2>
                <button
                  onClick={() => {
                    setShowDetailModal(false)
                    setActiveTab('profile')
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>
            
            {/* 모달 바디 - 스크롤 가능 */}
            <div className="flex-1 overflow-y-auto p-6">

              {/* 인플루언서 기본 정보 - 고급스러운 디자인 */}
              <div className="bg-gradient-to-r from-indigo-500 to-purple-600 p-6 rounded-xl mb-6">
                <div className="flex items-start gap-6">
                  <div className="relative">
                    <div className="w-28 h-28 bg-white rounded-2xl overflow-hidden flex-shrink-0 shadow-xl">
                      {selectedApplicant.influencer?.profile?.profileImage ? (
                        <img 
                          src={selectedApplicant.influencer.profile.profileImage} 
                          alt={selectedApplicant.influencerName || '인플루언서'}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                          <User className="w-14 h-14 text-gray-400" />
                        </div>
                      )}
                    </div>
                    {/* 국기 배지 */}
                    {selectedApplicant.influencer?.profile?.location && (
                      <div className="absolute -bottom-2 -right-2 w-10 h-10 bg-white rounded-full shadow-lg flex items-center justify-center">
                        <span className="text-xl">🇰🇷</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex-1 text-white">
                    <div className="flex items-center gap-3 mb-3">
                      <h3 className="text-3xl font-bold">{selectedApplicant.influencerName || '이름 없음'}</h3>
                      <div className="px-3 py-1 bg-white/20 backdrop-blur rounded-full">
                        <span className="text-sm font-medium">{getStatusText(selectedApplicant.status)}</span>
                      </div>
                    </div>
                    <p className="text-white/90 mb-3 flex items-center gap-2">
                      <Instagram className="w-4 h-4" />
                      @{selectedApplicant.influencerHandle}
                    </p>
                    
                    <div className="grid grid-cols-2 gap-4 mt-4">
                      <div>
                        <p className="text-white/70 text-sm">캠페인</p>
                        <p className="font-medium">{selectedApplicant.campaignTitle}</p>
                      </div>
                      <div>
                        <p className="text-white/70 text-sm">지원일</p>
                        <p className="font-medium">{formatDate(selectedApplicant.appliedAt || selectedApplicant.createdAt)}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* 탭 네비게이션 */}
              <div className="flex border-b border-gray-200 mb-6">
                <button
                  onClick={() => setActiveTab('profile')}
                  className={`px-4 py-2 text-sm font-medium border-b-2 ${
                    activeTab === 'profile'
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  기본 정보
                </button>
                <button
                  onClick={() => setActiveTab('sns')}
                  className={`px-4 py-2 text-sm font-medium border-b-2 ${
                    activeTab === 'sns'
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  SNS 정보
                </button>
                <button
                  onClick={() => setActiveTab('application')}
                  className={`px-4 py-2 text-sm font-medium border-b-2 ${
                    activeTab === 'application'
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  지원 정보
                </button>
              </div>

              {/* 탭 컨텐츠 */}
              <div className="space-y-6">
                {/* 기본 정보 탭 - 상세 프로필 정보 */}
                {activeTab === 'profile' && (
                  <div className="space-y-6">
                    {/* 기본 프로필 정보 카드 */}
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                        <User className="w-5 h-5 text-indigo-600" />
                        기본 정보
                      </h3>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                        {/* 이름 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">이름</p>
                          <p className="font-medium text-gray-900">
                            {selectedApplicant.influencer?.name || selectedApplicant.influencerName || '-'}
                          </p>
                        </div>
                        
                        {/* 나이/연령대 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">연령대</p>
                          <p className="font-medium text-gray-900">
                            {selectedApplicant.influencer?.profile?.ageRange || '20-30대'}
                          </p>
                        </div>
                        
                        {/* 성별 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">성별</p>
                          <p className="font-medium text-gray-900">
                            {selectedApplicant.influencer?.profile?.gender === 'MALE' ? '남성' : 
                             selectedApplicant.influencer?.profile?.gender === 'FEMALE' ? '여성' : '미공개'}
                          </p>
                        </div>
                        
                        {/* 국가/지역 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">국가/지역</p>
                          <p className="font-medium text-gray-900 flex items-center gap-2">
                            <span className="text-lg">🇰🇷</span>
                            {selectedApplicant.influencer?.profile?.location || '대한민국'}
                          </p>
                        </div>
                        
                        {/* 이메일 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">이메일</p>
                          <p className="font-medium text-gray-900 text-sm">
                            {selectedApplicant.influencer?.email || 'demo@revu.com'}
                          </p>
                        </div>
                        
                        {/* 연락처 */}
                        <div>
                          <p className="text-sm text-gray-500 mb-1">연락처</p>
                          <p className="font-medium text-gray-900">
                            {selectedApplicant.influencer?.phone || '010-1234-5678'}
                          </p>
                        </div>
                      </div>
                      
                      {/* 카테고리 */}
                      <div className="mt-6 pt-6 border-t">
                        <p className="text-sm text-gray-500 mb-3">주요 카테고리</p>
                        <div className="flex flex-wrap gap-2">
                          {(selectedApplicant.influencer?.profile?.categories || '패션, 뷰티, 라이프스타일').split(',').map((cat, i) => (
                            <span key={i} className="px-3 py-1.5 bg-indigo-100 text-indigo-700 rounded-full text-sm font-medium">
                              {cat.trim()}
                            </span>
                          ))}
                        </div>
                      </div>
                      
                      {/* 소개 */}
                      {selectedApplicant.influencer?.profile?.bio && (
                        <div className="mt-6 pt-6 border-t">
                          <p className="text-sm text-gray-500 mb-2">소개</p>
                          <p className="text-gray-700 whitespace-pre-wrap">
                            {selectedApplicant.influencer.profile.bio}
                          </p>
                        </div>
                      )}
                    </div>
                    
                    {/* 주요 지표 카드 */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="bg-gradient-to-br from-blue-500 to-blue-600 p-5 rounded-xl text-white">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-12 h-12 bg-white/20 backdrop-blur rounded-lg flex items-center justify-center">
                            <TrendingUp className="w-6 h-6" />
                          </div>
                          <div>
                            <p className="text-white/80 text-sm">평균 참여율</p>
                            <p className="text-2xl font-bold">
                              {calculateAverageEngagement(selectedApplicant)}%
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gradient-to-br from-purple-500 to-purple-600 p-5 rounded-xl text-white">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-12 h-12 bg-white/20 backdrop-blur rounded-lg flex items-center justify-center">
                            <Users className="w-6 h-6" />
                          </div>
                          <div>
                            <p className="text-white/80 text-sm">총 팔로워</p>
                            <p className="text-2xl font-bold">
                              {calculateTotalFollowers(selectedApplicant).toLocaleString()}
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-gradient-to-br from-green-500 to-green-600 p-5 rounded-xl text-white">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-12 h-12 bg-white/20 backdrop-blur rounded-lg flex items-center justify-center">
                            <Globe className="w-6 h-6" />
                          </div>
                          <div>
                            <p className="text-white/80 text-sm">활동 플랫폼</p>
                            <p className="text-2xl font-bold">
                              {countActivePlatforms(selectedApplicant)}개
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* 추가 정보 섹션 - 기존 코드 유지 */}
                    <div className="bg-gray-50 p-6 rounded-lg">
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">추가 정보</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {/* 이메일 */}
                        {selectedApplicant.influencer?.email && (
                          <div className="flex items-center gap-3">
                            <Mail className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">이메일</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.email}</p>
                            </div>
                          </div>
                        )}

                        {/* 전화번호 */}
                        {selectedApplicant.influencer?.phone && (
                          <div className="flex items-center gap-3">
                            <Phone className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">연락처</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.phone}</p>
                            </div>
                          </div>
                        )}

                        {/* 위치 */}
                        {selectedApplicant.influencer?.profile?.location && (
                          <div className="flex items-center gap-3">
                            <MapPin className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">활동 지역</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.profile.location}</p>
                            </div>
                          </div>
                        )}

                        {/* 웹사이트 */}
                        {selectedApplicant.influencer?.profile?.website && (
                          <div className="flex items-center gap-3">
                            <Globe className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">웹사이트</p>
                              <a href={selectedApplicant.influencer.profile.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                {selectedApplicant.influencer.profile.website}
                              </a>
                            </div>
                          </div>
                        )}

                        {/* 성별 */}
                        {selectedApplicant.influencer?.profile?.gender && (
                          <div className="flex items-center gap-3">
                            <User className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">성별</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.profile.gender}</p>
                            </div>
                          </div>
                        )}

                        {/* 연령대 */}
                        {selectedApplicant.influencer?.profile?.ageRange && (
                          <div className="flex items-center gap-3">
                            <Calendar className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">연령대</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.profile.ageRange}</p>
                            </div>
                          </div>
                        )}

                        {/* 카테고리 */}
                        {selectedApplicant.influencer?.profile?.categories && (
                          <div className="flex items-center gap-3">
                            <Hash className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-500">활동 분야</p>
                              <p className="text-gray-900">{selectedApplicant.influencer.profile.categories}</p>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* 소개 */}
                      {selectedApplicant.influencer?.profile?.bio && (
                        <div className="mt-4 pt-4 border-t">
                          <p className="text-sm text-gray-500 mb-2">소개</p>
                          <p className="text-gray-900 whitespace-pre-wrap">{selectedApplicant.influencer.profile.bio}</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* SNS 정보 탭 - 모든 플랫폼 표시 */}
                {activeTab === 'sns' && (
                  <div className="space-y-6">
                    {/* SNS 요약 정보 */}
                    <div className="bg-gradient-to-r from-indigo-500 to-purple-600 p-5 rounded-xl text-white">
                      <h3 className="text-lg font-semibold mb-3">SNS 활동 요약</h3>
                      <div className="grid grid-cols-3 gap-4">
                        <div>
                          <p className="text-white/80 text-sm">총 팔로워</p>
                          <p className="text-2xl font-bold">{calculateTotalFollowers(selectedApplicant).toLocaleString()}</p>
                        </div>
                        <div>
                          <p className="text-white/80 text-sm">평균 참여율</p>
                          <p className="text-2xl font-bold">{calculateAverageEngagement(selectedApplicant)}%</p>
                        </div>
                        <div>
                          <p className="text-white/80 text-sm">활동 플랫폼</p>
                          <p className="text-2xl font-bold">{countActivePlatforms(selectedApplicant)}개</p>
                        </div>
                      </div>
                    </div>
                    
                    {/* 모든 SNS 플랫폼 그리드 */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {/* Instagram */}
                      {(selectedApplicant.influencer?.profile?.instagram || selectedApplicant.influencerHandle) && (
                        <SNSCard
                          platform="Instagram"
                          handle={selectedApplicant.influencer?.profile?.instagram || selectedApplicant.influencerHandle}
                          followers={selectedApplicant.influencer?.profile?.instagramFollowers || selectedApplicant.followers || 0}
                          engagementRate={selectedApplicant.influencer?.profile?.instagramEngagementRate || selectedApplicant.engagementRate}
                          icon={Instagram}
                          color="from-purple-500 to-pink-500"
                          url={`https://instagram.com/${selectedApplicant.influencer?.profile?.instagram || selectedApplicant.influencerHandle}`}
                        />
                      )}

                      {/* YouTube */}
                      {selectedApplicant.influencer?.profile?.youtube && (
                        <SNSCard
                          platform="YouTube"
                          handle={selectedApplicant.influencer.profile.youtube}
                          followers={selectedApplicant.influencer.profile.youtubeSubscribers || 0}
                          engagementRate={selectedApplicant.influencer.profile.youtubeEngagementRate}
                          icon={Youtube}
                          color="from-red-500 to-red-600"
                          url={`https://youtube.com/@${selectedApplicant.influencer.profile.youtube}`}
                        />
                      )}

                      {/* Facebook */}
                      {selectedApplicant.influencer?.profile?.facebook && (
                        <SNSCard
                          platform="Facebook"
                          handle={selectedApplicant.influencer.profile.facebook}
                          followers={selectedApplicant.influencer.profile.facebookFollowers || 0}
                          engagementRate={selectedApplicant.influencer.profile.facebookEngagementRate}
                          icon={Facebook}
                          color="from-blue-500 to-blue-600"
                          url={`https://facebook.com/${selectedApplicant.influencer.profile.facebook}`}
                        />
                      )}

                      {/* Twitter */}
                      {selectedApplicant.influencer?.profile?.twitter && (
                        <SNSCard
                          platform="Twitter"
                          handle={selectedApplicant.influencer.profile.twitter}
                          followers={selectedApplicant.influencer.profile.twitterFollowers || 0}
                          engagementRate={selectedApplicant.influencer.profile.twitterEngagementRate}
                          icon={Twitter}
                          color="from-sky-400 to-sky-500"
                          url={`https://twitter.com/${selectedApplicant.influencer.profile.twitter}`}
                        />
                      )}

                      {/* TikTok */}
                      {selectedApplicant.influencer?.profile?.tiktok && (
                        <div className="bg-gradient-to-r from-gray-900 to-gray-800 p-1 rounded-lg">
                          <div className="bg-white p-4 rounded-lg">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-2">
                                <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
                                  <span className="text-white font-bold text-sm">TT</span>
                                </div>
                                <div>
                                  <h4 className="font-semibold text-gray-900">TikTok</h4>
                                  <p className="text-xs text-gray-600 truncate max-w-[150px]">@{selectedApplicant.influencer.profile.tiktok}</p>
                                </div>
                              </div>
                              <a
                                href={`https://tiktok.com/@${selectedApplicant.influencer.profile.tiktok}`}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="inline-flex items-center px-2 py-1 bg-black text-white rounded text-xs hover:bg-gray-800 transition-colors"
                              >
                                보기
                              </a>
                            </div>
                            <div className="grid grid-cols-2 gap-2 text-center">
                              <div>
                                <p className="text-lg font-bold text-gray-900">
                                  {(selectedApplicant.influencer.profile.tiktokFollowers || 0).toLocaleString()}
                                </p>
                                <p className="text-xs text-gray-600">팔로워</p>
                              </div>
                              <div>
                                <p className="text-lg font-bold text-gray-900">
                                  {selectedApplicant.influencer.profile.tiktokEngagementRate || '-'}%
                                </p>
                                <p className="text-xs text-gray-600">참여율</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Blog */}
                      {selectedApplicant.influencer?.profile?.blog && (
                        <div className="bg-gradient-to-r from-green-500 to-green-600 p-1 rounded-lg">
                          <div className="bg-white p-4 rounded-lg">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-2">
                                <Globe className="w-6 h-6 text-green-600" />
                                <div>
                                  <h4 className="font-semibold text-gray-900">Blog</h4>
                                  <p className="text-xs text-gray-600 truncate max-w-[150px]">{selectedApplicant.influencer.profile.blog}</p>
                                </div>
                              </div>
                              <a
                                href={selectedApplicant.influencer.profile.blog}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="inline-flex items-center px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700 transition-colors"
                              >
                                보기
                              </a>
                            </div>
                            <div className="grid grid-cols-2 gap-2 text-center">
                              <div>
                                <p className="text-lg font-bold text-gray-900">
                                  {(selectedApplicant.influencer.profile.blogVisitors || 0).toLocaleString()}
                                </p>
                                <p className="text-xs text-gray-600">월 방문자</p>
                              </div>
                              <div>
                                <p className="text-lg font-bold text-gray-900">
                                  {(selectedApplicant.influencer.profile as any).blogPosts || '-'}
                                </p>
                                <p className="text-xs text-gray-600">포스트</p>
                              </div>
                            </div>
                          </div>
                        </div>
                    )}

                    </div>
                    
                    {/* SNS 정보가 없는 경우 */}
                    {!selectedApplicant.influencer?.profile?.instagram && !selectedApplicant.influencer?.profile?.youtube && !selectedApplicant.influencerHandle && (
                      <div className="text-center py-12">
                        <User className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                        <p className="text-gray-500">등록된 SNS 정보가 없습니다.</p>
                      </div>
                    )}
                  </div>
                )}

                {/* 지원 정보 탭 */}
                {activeTab === 'application' && (
                  <div className="space-y-6">
                    {/* 캠페인 정보 */}
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-3">캠페인 정보</h4>
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <p className="font-medium text-gray-900 mb-2">{selectedApplicant.campaignTitle}</p>
                        <p className="text-sm text-gray-600">지원일: {formatDate(selectedApplicant.createdAt)}</p>
                        {selectedApplicant.proposedPrice && (
                          <p className="text-sm text-gray-600">제안 금액: ₩{selectedApplicant.proposedPrice.toLocaleString()}</p>
                        )}
                      </div>
                    </div>

                    {/* 지원 메시지 */}
                    {selectedApplicant.message && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3">지원 메시지</h4>
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <p className="text-gray-700 whitespace-pre-wrap">{selectedApplicant.message}</p>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            
            {/* 액션 버튼 - 모달 하단 고정 */}
            <div className="border-t px-6 py-4 bg-white">
              <div className="flex justify-center gap-4">
                {selectedApplicant.status === 'PENDING' && (
                  <>
                    <button
                      onClick={() => handleStatusChange(selectedApplicant.id, selectedApplicant.campaignId, 'APPROVED')}
                      className="inline-flex items-center px-6 py-3 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 transition-colors"
                    >
                      <Check className="w-5 h-5 mr-2" />
                      지원 수락
                    </button>
                    <button
                      onClick={() => handleStatusChange(selectedApplicant.id, selectedApplicant.campaignId, 'REJECTED')}
                      className="inline-flex items-center px-6 py-3 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition-colors"
                    >
                      <X className="w-5 h-5 mr-2" />
                      지원 거절
                    </button>
                  </>
                )}
                
                {selectedApplicant.status === 'APPROVED' && (
                  <div className="text-center">
                    <p className="text-green-600 font-medium mb-3">✅ 이미 승인된 지원자입니다</p>
                    <button
                      onClick={() => handleStatusChange(selectedApplicant.id, selectedApplicant.campaignId, 'REJECTED')}
                      className="inline-flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors"
                    >
                      <X className="w-4 h-4 mr-2" />
                      승인 취소
                    </button>
                  </div>
                )}
                
                {selectedApplicant.status === 'REJECTED' && (
                  <div className="text-center">
                    <p className="text-red-600 font-medium mb-3">❌ 거절된 지원자입니다</p>
                    <button
                      onClick={() => handleStatusChange(selectedApplicant.id, selectedApplicant.campaignId, 'APPROVED')}
                      className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 transition-colors"
                    >
                      <Check className="w-4 h-4 mr-2" />
                      다시 승인
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}