generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  BUSINESS
  INFLUENCER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL_REFUNDED
  REFUNDED
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String
  name                 String
  type                 String
  status               String                @default("ACTIVE")
  statusReason         String?
  statusUpdatedAt      DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  lastLogin            DateTime?
  verified             Boolean               @default(false)
  applicationTemplates ApplicationTemplate[]
  businessProfile      BusinessProfile?
  applications         CampaignApplication[]
  campaignTemplates    CampaignTemplate[]
  campaigns            Campaign[]
  comments             Comment[]
  files                File[]
  followers            Follow[]              @relation("UserFollowers")
  following            Follow[]              @relation("UserFollowing")
  notificationSettings NotificationSettings?
  notifications        Notification[]
  payments             Payment[]
  postLikes            PostLike[]
  posts                Post[]
  profile              Profile?
  savedCampaigns       SavedCampaign[]
  settlements          Settlement[]
  campaignLikes        CampaignLike[]
  reports              Report[]

  @@map("users")
}

model Profile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  bio                   String?
  profileImage          String?
  profileImageId        String?
  phone                 String?
  birthYear             Int?
  gender                String?
  instagram             String?
  instagramFollowers    Int?
  youtube               String?
  youtubeSubscribers    Int?
  tiktok                String?
  tiktokFollowers       Int?
  averageEngagementRate Float?
  categories            String?
  isVerified            Boolean   @default(false)
  verificationNotes     String?
  verifiedAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  followerCount         Int       @default(0)
  naverBlog             String?
  address               String?
  bankName              String?
  bankAccountNumber     String?
  bankAccountHolder     String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model BusinessProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  companyName          String
  businessNumber       String
  representativeName   String
  businessAddress      String
  businessCategory     String
  businessRegistration String?   // 사업자등록증 파일 URL
  businessFileName     String?   // 원본 파일명
  businessFileSize     Int?      // 파일 크기 (bytes)
  isVerified           Boolean   @default(false)
  verificationNotes    String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Campaign {
  id                   String                @id @default(cuid())
  businessId           String
  title                String
  description          String
  platform             String
  budget               Float
  targetFollowers      Int
  startDate            DateTime
  endDate              DateTime
  requirements         String?
  hashtags             String?
  imageUrl             String?               // 기존 필드 (호환성 유지)
  imageId              String?
  headerImageUrl       String?               // 상세페이지 헤더 배경 이미지
  thumbnailImageUrl    String?               // 썸네일 이미지
  announcementDate     DateTime?             // 지원자 발표일
  status               String                @default("DRAFT")
  isPaid               Boolean               @default(false)
  reviewFeedback       String?
  reviewedAt           DateTime?
  maxApplicants        Int                   @default(100)
  rewardAmount         Float                 @default(0)
  detailImages         Json?                 // 상세 이미지 배열
  productImages        Json?                 // 상품소개 이미지 배열
  questions            Json?                 // 추가 질문 JSON
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deliverables         String?
  detailedRequirements String?
  platformFeeRate      Float                 @default(0.2) // 플랫폼 수수료율 (기본 20%)
  location             String                @default("전국")
  productIntro         String?
  viewCount            Int                   @default(0)
  platforms            String?
  applications         CampaignApplication[]
  business             User                  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payments             Payment[]
  savedByUsers         SavedCampaign[]
  campaignLikes        CampaignLike[]

  @@map("campaigns")
}

model CampaignApplication {
  id              String           @id @default(cuid())
  campaignId      String
  influencerId    String
  message         String
  proposedPrice   Float?
  status          String           @default("PENDING")
  reviewedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  campaign        Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer      User             @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  contents        Content[]
  settlementItems SettlementItem[]

  @@unique([campaignId, influencerId])
  @@map("campaign_applications")
}

model Content {
  id            String              @id @default(cuid())
  applicationId String
  contentUrl    String
  description   String?
  platform      String
  status        String              @default("PENDING_REVIEW")
  feedback      String?
  reviewedAt    DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  media         ContentMedia[]
  application   CampaignApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model ContentMedia {
  id        String   @id @default(cuid())
  contentId String
  fileId    String
  type      String
  order     Int
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("content_media")
}

model Payment {
  id             String    @id @default(cuid())
  orderId        String    @unique
  campaignId     String?
  userId         String
  amount         Float
  type           String
  status         String    @default("PENDING")
  paymentMethod  String
  paymentKey     String?
  approvedAt     DateTime?
  failedAt       DateTime?
  failReason     String?
  receipt        String?
  refundedAmount Float     @default(0)
  metadata       String    @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  campaign       Campaign? @relation(fields: [campaignId], references: [id])
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds        Refund[]

  @@map("payments")
}

model Refund {
  id          String   @id @default(cuid())
  paymentId   String
  amount      Float
  reason      String
  status      String
  processedAt DateTime
  metadata    String   @default("{}")
  createdAt   DateTime @default(now())
  payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Settlement {
  id           String           @id @default(cuid())
  influencerId String
  totalAmount  Float
  status       String
  bankAccount  String
  adminNotes   String?
  processedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  items        SettlementItem[]
  influencer   User             @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

model SettlementItem {
  id            String              @id @default(cuid())
  settlementId  String
  applicationId String
  amount        Float
  campaignTitle String
  application   CampaignApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  settlement    Settlement          @relation(fields: [settlementId], references: [id], onDelete: Cascade)

  @@map("settlement_items")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  actionUrl String?
  readAt    DateTime?
  metadata  String    @default("{}")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  email              Boolean  @default(true)
  push               Boolean  @default(true)
  sms                Boolean  @default(false)
  campaignUpdates    Boolean  @default(true)
  applicationUpdates Boolean  @default(true)
  paymentUpdates     Boolean  @default(true)
  marketing          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model SavedCampaign {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
  @@map("saved_campaigns")
}

model File {
  id           String         @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  type         String
  metadata     String         @default("{}")
  createdAt    DateTime       @default(now())
  contentMedia ContentMedia[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@map("site_config")
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String
  authorId  String
  category  String
  status    String     @default("PUBLISHED")
  views     Int        @default(0)
  likes     Int        @default(0)
  isPinned  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  postLikes PostLike[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  status    String    @default("PUBLISHED")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model ApplicationTemplate {
  id        String   @id @default(cuid())
  name      String
  content   String
  userId    String?
  isPublic  Boolean  @default(true)
  category  String?
  useCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isPublic])
  @@index([category])
  @@map("application_templates")
}

model CampaignTemplate {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  description String?
  data        Json
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    User     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("campaign_templates")
}

model CampaignLike {
  id         String   @id @default(cuid())
  campaignId String
  userId     String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([campaignId, userId])
  @@map("campaign_likes")
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  type        String   // 'content', 'user', 'campaign', 'payment'
  targetId    String
  reason      String
  description String?
  status      String   @default("pending") // 'pending', 'investigating', 'resolved', 'dismissed'
  priority    String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  adminNotes  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Revenue {
  id           String   @id @default(cuid())
  type         String   // 'campaign_fee', 'premium_subscription', 'featured_listing'
  amount       Float
  referenceId  String?  // Related campaign, user, or payment ID
  description  String?
  metadata     Json?
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  
  @@index([type])
  @@index([date])
  @@map("revenues")
}

model Expense {
  id          String   @id @default(cuid())
  type        String   // 'influencer_payment', 'refund', 'operational'
  amount      Float
  referenceId String?  // Related settlement, refund, or payment ID
  description String?
  metadata    Json?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@index([type])
  @@index([date])
  @@map("expenses")
}
