generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                         String                @id @default(cuid())
  email                      String                @unique
  password                   String
  name                       String
  type                       String
  status                     String                @default("ACTIVE")
  statusReason               String?
  statusUpdatedAt            DateTime?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  lastLogin                  DateTime?
  verified                   Boolean               @default(false)
  deletedAt                  DateTime?
  applicationTemplates       ApplicationTemplate[]
  businessProfile            BusinessProfile?
  applications               CampaignApplication[]
  campaignLikes              CampaignLike[]
  campaignTemplates          CampaignTemplate[]
  editedCampaignTranslations CampaignTranslation[] @relation("TranslationEditor")
  campaigns                  Campaign[]
  comments                   Comment[]
  files                      File[]
  followers                  Follow[]              @relation("UserFollowers")
  following                  Follow[]              @relation("UserFollowing")
  logs                       Log[]
  notificationSettings       NotificationSettings?
  notifications              Notification[]
  payments                   Payment[]
  postLikes                  PostLike[]
  editedPostTranslations     PostTranslation[]     @relation("PostTranslationEditor")
  posts                      Post[]
  profile                    Profile?
  reports                    Report[]
  savedCampaigns             SavedCampaign[]
  settlements                Settlement[]
  socialAccounts             SocialAccount[]
  withdrawalAccount          WithdrawalAccount?

  @@map("users")
}

model Profile {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  bio                    String?
  profileImage           String?
  profileImageId         String?
  phone                  String?
  birthYear              Int?
  gender                 String?
  instagram              String?
  instagramFollowers     Int?
  youtube                String?
  youtubeSubscribers     Int?
  tiktok                 String?
  tiktokFollowers        Int?
  facebook               String?
  facebookFollowers      Int?
  twitter                String?
  twitterFollowers       Int?
  averageEngagementRate  Float?
  categories             String?
  isVerified             Boolean   @default(false)
  verificationNotes      String?
  verifiedAt             DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  followerCount          Int       @default(0)
  naverBlog              String?
  address                String?
  bankName               String?
  bankAccountNumber      String?
  bankAccountHolder      String?
  naverBlogFollowers     Int?
  snsLastUpdated         DateTime?
  naverBlogTodayVisitors Int?
  birthDate              DateTime?
  nationality            String?
  realName               String?
  addressData            Json?
  profileCompleted       Boolean   @default(false)
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model BusinessProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  companyName          String
  businessNumber       String
  representativeName   String
  businessAddress      String
  businessCategory     String
  businessRegistration String?
  businessFileName     String?
  businessFileSize     Int?
  isVerified           Boolean   @default(false)
  verificationNotes    String?
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Campaign {
  id                     String                @id @default(cuid())
  businessId             String
  title                  String
  description            String
  platform               String
  budget                 Float?
  targetFollowers        Int?
  startDate              DateTime
  endDate                DateTime
  requirements           String?
  hashtags               String?
  imageUrl               String?
  imageId                String?
  headerImageUrl         String?
  thumbnailImageUrl      String?
  announcementDate       DateTime?
  status                 String                @default("DRAFT")
  isPaid                 Boolean               @default(false)
  reviewFeedback         String?
  reviewedAt             DateTime?
  maxApplicants          Int                   @default(100)
  rewardAmount           Float                 @default(0)
  detailImages           Json?
  productImages          Json?
  questions              Json?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  deliverables           String?
  detailedRequirements   String?
  platformFeeRate        Float                 @default(0.2)
  location               String                @default("전국")
  productIntro           String?
  viewCount              Int                   @default(0)
  platforms              String?
  translations           Json?
  additionalNotes        String?
  applicationEndDate     DateTime?
  applicationStartDate   DateTime?
  campaignMission        String?
  contentEndDate         DateTime?
  contentStartDate       DateTime?
  keywords               String?
  provisionDetails       String?
  resultAnnouncementDate DateTime?
  category               String?
  mainCategory           String?
  deletedAt              DateTime?
  applications           CampaignApplication[]
  categories             CampaignCategory[]
  campaignLikes          CampaignLike[]
  campaignTranslations   CampaignTranslation[]
  business               User                  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payments               Payment[]
  savedByUsers           SavedCampaign[]

  @@map("campaigns")
}

model CampaignApplication {
  id              String           @id @default(cuid())
  campaignId      String
  influencerId    String
  message         String
  proposedPrice   Float?
  status          String           @default("PENDING")
  reviewedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  campaign        Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer      User             @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  contents        Content[]
  settlementItems SettlementItem[]

  @@unique([campaignId, influencerId])
  @@map("campaign_applications")
}

model Content {
  id            String              @id @default(cuid())
  applicationId String
  contentUrl    String
  description   String?
  platform      String
  status        String              @default("PENDING_REVIEW")
  feedback      String?
  reviewedAt    DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  media         ContentMedia[]
  application   CampaignApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model ContentMedia {
  id        String   @id @default(cuid())
  contentId String
  fileId    String
  type      String
  order     Int
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("content_media")
}

model Payment {
  id             String    @id @default(cuid())
  orderId        String    @unique
  campaignId     String?
  userId         String
  amount         Float
  type           String
  status         String    @default("PENDING")
  paymentMethod  String
  paymentKey     String?
  approvedAt     DateTime?
  failedAt       DateTime?
  failReason     String?
  receipt        String?
  refundedAmount Float     @default(0)
  metadata       String    @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  campaign       Campaign? @relation(fields: [campaignId], references: [id])
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds        Refund[]

  @@map("payments")
}

model Refund {
  id          String   @id @default(cuid())
  paymentId   String
  amount      Float
  reason      String
  status      String
  processedAt DateTime
  metadata    String   @default("{}")
  createdAt   DateTime @default(now())
  payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Settlement {
  id           String           @id @default(cuid())
  influencerId String
  totalAmount  Float
  status       String
  bankAccount  String
  adminNotes   String?
  processedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  items        SettlementItem[]
  influencer   User             @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

model SettlementItem {
  id            String              @id @default(cuid())
  settlementId  String
  applicationId String
  amount        Float
  campaignTitle String
  application   CampaignApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  settlement    Settlement          @relation(fields: [settlementId], references: [id], onDelete: Cascade)

  @@map("settlement_items")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  actionUrl String?
  readAt    DateTime?
  metadata  String    @default("{}")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  email              Boolean  @default(true)
  push               Boolean  @default(true)
  sms                Boolean  @default(false)
  campaignUpdates    Boolean  @default(true)
  applicationUpdates Boolean  @default(true)
  paymentUpdates     Boolean  @default(true)
  marketing          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model SavedCampaign {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
  @@map("saved_campaigns")
}

model File {
  id           String         @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimetype     String
  size         Int
  path         String
  url          String
  type         String
  metadata     String         @default("{}")
  createdAt    DateTime       @default(now())
  contentMedia ContentMedia[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  category  String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([key])
  @@index([category])
  @@map("site_config")
}

model ApiConfig {
  id               String   @id @default(cuid())
  service          String   @unique
  apiKey           String?
  apiSecret        String?
  endpoint         String?
  region           String?
  bucket           String?
  additionalConfig Json?
  isEnabled        Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  @@index([service])
  @@map("api_config")
}

model Post {
  id               String            @id @default(cuid())
  title            String
  content          String
  authorId         String
  category         String
  status           String            @default("PUBLISHED")
  views            Int               @default(0)
  likes            Int               @default(0)
  isPinned         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  comments         Comment[]
  postLikes        PostLike[]
  postTranslations PostTranslation[]
  author           User              @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  status    String    @default("PUBLISHED")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model ApplicationTemplate {
  id        String   @id @default(cuid())
  name      String
  content   String
  userId    String?
  isPublic  Boolean  @default(true)
  category  String?
  useCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isPublic])
  @@index([category])
  @@map("application_templates")
}

model CampaignTemplate {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  description String?
  data        Json
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    User     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("campaign_templates")
}

model CampaignLike {
  id         String   @id @default(cuid())
  campaignId String
  userId     String
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@map("campaign_likes")
}

model Report {
  id          String    @id @default(cuid())
  reporterId  String
  type        String
  targetId    String
  reason      String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  adminNotes  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    User      @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model LanguagePack {
  id          String   @id @default(cuid())
  key         String   @unique
  ko          String
  en          String
  category    String
  description String?
  isEditable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jp          String

  @@index([category])
  @@map("language_packs")
}

model UISection {
  id           String   @id @default(cuid())
  sectionId    String   @unique
  type         String
  title        String?
  subtitle     String?
  content      Json?
  order        Int      @default(0)
  visible      Boolean  @default(true)
  translations Json?
  settings     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ui_sections")
}

model Revenue {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  referenceId String?
  description String?
  metadata    Json?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([type])
  @@index([date])
  @@map("revenues")
}

model Expense {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  referenceId String?
  description String?
  metadata    Json?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([type])
  @@index([date])
  @@map("expenses")
}

model CampaignTranslation {
  id               String    @id @default(cuid())
  campaignId       String
  language         String
  title            String
  description      String
  requirements     String?
  hashtags         String[]
  isAutoTranslated Boolean   @default(true)
  lastEditedBy     String?
  editedAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  campaign         Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  editor           User?     @relation("TranslationEditor", fields: [lastEditedBy], references: [id])

  @@unique([campaignId, language])
  @@index([language])
  @@map("campaign_translations")
}

model PostTranslation {
  id               String    @id @default(cuid())
  postId           String
  language         String
  title            String
  content          String
  isAutoTranslated Boolean   @default(true)
  lastEditedBy     String?
  editedAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  editor           User?     @relation("PostTranslationEditor", fields: [lastEditedBy], references: [id])
  post             Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, language])
  @@index([language])
  @@map("post_translations")
}

model Log {
  id         String   @id @default(uuid())
  level      String   @db.VarChar(10)
  message    String
  context    Json?
  userId     String?
  requestId  String?  @db.VarChar(50)
  errorStack String?
  component  String?  @db.VarChar(100)
  operation  String?  @db.VarChar(100)
  duration   Int?
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([userId])
  @@index([createdAt])
  @@index([requestId])
  @@index([component])
  @@map("logs")
}

model SocialAccount {
  id             String    @id @default(cuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  profileImage   String?
  profileData    Json?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([provider])
  @@map("social_accounts")
}

model Category {
  id                String             @id @default(cuid())
  slug              String             @unique
  parentId          String?
  level             Int                @default(1)
  name              String
  description       String?
  icon              String?
  color             String?
  imageUrl          String?
  order             Int?               @default(0)
  isActive          Boolean            @default(true)
  showInMenu        Boolean            @default(false)
  menuOrder         Int?
  seoTitle          String?
  seoDescription    String?
  customPageContent Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  campaigns         CampaignCategory[]
  parent            Category?          @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]         @relation("CategoryHierarchy")
  categoryPage      CategoryPage?

  @@index([parentId])
  @@index([level])
  @@index([isActive])
  @@index([showInMenu])
  @@map("categories")
}

model CategoryPage {
  id              String    @id @default(cuid())
  categoryId      String    @unique
  title           String
  content         Json
  layout          String?   @default("grid")
  heroSection     Json?
  featuredSection Json?
  filterOptions   Json?
  customSections  Json?
  seoSettings     Json?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([isPublished])
  @@map("category_pages")
}

model CampaignCategory {
  id         String   @id @default(cuid())
  campaignId String
  categoryId String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([campaignId, categoryId])
  @@index([campaignId])
  @@index([categoryId])
  @@map("campaign_categories")
}

enum UserType {
  ADMIN
  BUSINESS
  INFLUENCER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CampaignStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  PAUSED
  COMPLETED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  PARTIAL_REFUNDED
  REFUNDED
}

model WithdrawalAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  bankName      String
  accountNumber String
  accountHolder String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawal_accounts")
}
