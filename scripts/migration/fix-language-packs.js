const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixLanguagePacks() {
  try {
    console.log('üîß Fixing language packs...\n');

    // Î≤àÏó≠Ïù¥ ÌïÑÏöîÌïú Ïñ∏Ïñ¥Ìå©Îì§
    const updates = [
      {
        key: 'header.menu.Î≥ëÏõê',
        ko: 'Î≥ëÏõê',
        en: 'Hospital',
        jp: 'ÁóÖÈô¢'
      },
      {
        key: 'header.menu.Íµ¨Îß§Ìèâ',
        ko: 'Íµ¨Îß§Ìèâ',
        en: 'Reviews',
        jp: '„É¨„Éì„É•„Éº'
      },
      {
        key: 'header.menu.Ïª§ÎÆ§ÎãàÌã∞',
        ko: 'Ïª§ÎÆ§ÎãàÌã∞',
        en: 'Community',
        jp: '„Ç≥„Éü„É•„Éã„ÉÜ„Ç£'
      },
      {
        key: 'header.menu.Ï∫†ÌéòÏù∏_Ïπ¥ÌÖåÍ≥†Î¶¨',
        ko: 'Ï∫†ÌéòÏù∏',
        en: 'Campaign',
        jp: '„Ç≠„É£„É≥„Éö„Éº„É≥'
      }
    ];

    for (const update of updates) {
      const existing = await prisma.languagePack.findUnique({
        where: { key: update.key }
      });

      if (existing) {
        // ÏóÖÎç∞Ïù¥Ìä∏
        await prisma.languagePack.update({
          where: { key: update.key },
          data: {
            ko: update.ko,
            en: update.en,
            jp: update.jp
          }
        });
        console.log(`‚úÖ Updated: ${update.key}`);
        console.log(`   KO: ${update.ko} | EN: ${update.en} | JP: ${update.jp}`);
      } else {
        // ÏÉàÎ°ú ÏÉùÏÑ±
        await prisma.languagePack.create({
          data: {
            key: update.key,
            ko: update.ko,
            en: update.en,
            jp: update.jp,
            category: 'header',
            description: 'Ìó§Îçî Î©îÎâ¥'
          }
        });
        console.log(`‚úÖ Created: ${update.key}`);
        console.log(`   KO: ${update.ko} | EN: ${update.en} | JP: ${update.jp}`);
      }
    }

    console.log('\n‚úÖ Language packs fixed successfully!');
    
    // ÏµúÏ¢Ö ÌôïÏù∏
    console.log('\nüìã Final language packs:');
    const packs = await prisma.languagePack.findMany({
      where: { 
        key: { 
          in: updates.map(u => u.key)
        }
      }
    });
    
    for (const pack of packs) {
      console.log(`${pack.key}: KO="${pack.ko}" EN="${pack.en}" JP="${pack.jp}"`);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixLanguagePacks();